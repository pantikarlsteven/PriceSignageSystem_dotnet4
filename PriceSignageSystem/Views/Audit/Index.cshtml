
@{
    ViewBag.Title = "Index";
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Audit</title>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.4/css/jquery.dataTables.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

    <script src="~/Scripts/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.4/js/jquery.dataTables.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.6.0/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
    <script src="~/Scripts/html5-qrcode.min.js"></script>

    <style>
        td.details-control {
            text-align: center;
            color: #6396fd;
            cursor: pointer;
        }

        tr.shown td.details-control {
            text-align: center;
            color: #fd6363;
        }

        th.no-sort::after {
            display: none !important;
        }

        .custom-button {
            background-color: #4CAF50;
            color: white;
            border: 1px solid green;
            border-radius: 4px;
            padding: 8px 16px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
            cursor: pointer;
            margin-right: 10px;
            margin-left: 10px;
        }


        .dataTables_wrapper .dataTables_filter {
            display: flex;
            align-items: center;
        }

        .graphcontainer {
            display: flex;
            flex-direction: column;
            align-items: center;
            font-size: 12px;
        }

        .graphrow {
            display: flex;
            flex-direction: row;
            justify-content: center;
            margin-bottom: 5px; /* Adjust as needed */
        }

        .graphcolumn {
            margin: 0 5px; /* Adjust as needed */
        }

        canvas {
            height: 400px !important;
            width: 100% !important;
        }
    </style>
</head>
<body>
    <div class="content-wrapper bg-white px-3">
        <div class="content">
            <div class="overlay-wrapper" id="loadingContainer" style="display:none;">
                <div class="overlay" style="background-color: rgba(0, 0, 0, 0.59); z-index: 999999;">
                    <img class="" src="~/Content/Images/loading.gif" alt="Loading" style="max-width:350px;" />
                </div>
            </div>

            <div class="overlay-wrapper" id="inventoryUpdateLoadingContainer" style="display:none;">
                <div class="overlay" style="background-color: rgba(0, 0, 0, 0.59); z-index: 999999;">
                    <img class="" src="~/Content/Images/loading.gif" alt="Loading" style="max-width:350px;" />
                    <p style="position: absolute; margin-top: 250px; background-color: #dee2e6; padding: 10px;">Updating Inventory. Please Wait...</p>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="card elevation-3  px-0 ">

                <ul class="nav nav-tabs bg-primary1 px-2 pt-2">
                    <li class="nav-item">
                        <a class="nav-link nav-link-tab active" style="color:white;" data-toggle="tab" href="#printed-pca">Printed</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link nav-link-tab" style="color:white;" data-toggle="tab" href="#audited-pca">Audited</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link nav-link-tab" style="color:white;" data-toggle="tab" href="#notprinted-pca">Unprinted</a>
                    </li>
                    <li class="nav-item">
                        <a id="graph-tab" class="nav-link nav-link-tab" style="color:white;" data-toggle="tab" href="#graph">Graph</a>
                    </li>
                </ul>

                <div class="tab-content table-responsive">
                    <div id="printed-pca" class="tab-pane active mx-2">
                        <h3 class="text-center mt-2">Printed Sign</h3>
                        <div class="row align-items-center justify-content-center">
                            <div class="col-auto" id="barcodeContainer">
                                <button id="barcodeScan" class="btn btn-primary" onclick="Scan()">Scan Bar Code</button>

                            </div>
                            <div class="col-auto" id="scaleTicket">
                                <input type="checkbox" name="ScaleTicket" id="scaleTicket" /> Scale Ticket
                            </div>
                        </div>
                        <table id="printed-pca-table" class="table table-sm table-hover" style="width: 100%; text-align: center;">
                            <thead style="background-color: #1C3766;" class="text-white">
                                <tr>
                                    <th>Audit?</th>
                                    <th>SKU</th>
                                    <th>UPC</th>
                                    <th>Brand</th>
                                    <th style="width: 200px;" class="text-nowrap">Item Desc.</th>
                                    <th>Wrong Sign?</th>
                                    <th>Reg Price</th>
                                    <th>Current Price</th>
                                    <th>Date Start</th>
                                    <th>Date End</th>
                                    <th>Type</th>
                                    <th>Size</th>
                                    <th>Category</th>
                                    <th>
                                        Dept
                                        <i class="filter-icon bi bi-funnel-fill"></i>
                                    </th>
                                    <th>Type</th>
                                    <th>Reverted?</th>
                                    <th>Exemption?</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td colspan="17" style="text-align: center;">No data available</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div id="audited-pca" class="tab-pane fade mx-2">
                        <h3 class="text-center mt-2">Audited Sign</h3>
                        <table id="audited-pca-table" class="table table-sm table-hover" style="width: 100%; text-align: center;">
                            <thead style="background-color: #1C3766;" class="text-white">
                                <tr>
                                    <th>SKU</th>
                                    <th>UPC</th>
                                    <th>Brand</th>
                                    <th style="width: 200px;" class="text-nowrap">Item Desc.</th>
                                    <th>Reg Price</th>
                                    <th>Current Price</th>
                                    <th>Date Start</th>
                                    <th>Date End</th>
                                    <th>Type</th>
                                    <th>Size</th>
                                    <th>Category</th>
                                    <th>
                                        Dept
                                        <i class="filter-icon bi bi-funnel-fill"></i>
                                    </th>
                                    <th>Type</th>
                                    <th>Reverted?</th>
                                    <th>Exemption?</th>
                                    <th>Remarks</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td colspan="16" style="text-align: center;">No data available</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div id="notprinted-pca" class="tab-pane fade mx-2">
                        <h3 class="text-center mt-2">Unprinted Sign</h3>
                        <table id="notprinted-pca-table" class="table table-sm table-hover" style="width: 100%; text-align: center;">
                            <thead style="background-color: #1C3766;" class="text-white">
                                <tr>
                                    <th>Not Required?</th>
                                    <th>SKU</th>
                                    <th>UPC</th>
                                    <th>Brand</th>
                                    <th style="width: 200px;" class="text-nowrap">Item Desc.</th>
                                    <th>Reg Price</th>
                                    <th>Current Price</th>
                                    <th>Date Start</th>
                                    <th>Date End</th>
                                    <th>Type</th>
                                    <th>Size</th>
                                    <th>Category</th>
                                    <th>
                                        Dept
                                        <i class="filter-icon bi bi-funnel-fill"></i>
                                    </th>
                                    <th>Type</th>
                                    <th>Reverted?</th>
                                    <th>Exemption?</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td colspan="16" style="text-align: center;">No data available</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div id="graph" class="tab-pane fade mx-2" style="min-height: 1000px">
                        <div class="row pt-3">
                            <div class="col-md-6">
                                <h3 class="graph1Count text-center">PRINT SUMMARY: </h3>
                                <div class="graph1Data"></div>
                                <canvas id="pieChart" ></canvas>

                            </div>
                            <div class="col-md-6">
                                <h3 class="graph2Count text-center">AUDIT SUMMARY: </h3>
                                <div class="graph2Data"></div>
                                <canvas id="pieChart2" ></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- BARCODE SCAN Modal -->
        <div class="modal" id="barcodeScanModal" tabindex="-1" role="dialog" aria-labelledby="barcodeScanModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="qbarcodeScanModalLongTitle">BAR CODE SCAN</h5>
                        <button type="button" onclick="closeModal()">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div id="reader"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Scan Result Modal -->
        <div class="modal" id="scanResultModal" tabindex="-1" role="dialog" aria-labelledby="scanResultModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-fullscreen modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="sku"></h5>
                        <h5 class="scanResultTitle modal-title" id="scanResultModalLongTitle"></h5>
                        <button type="button" onclick="closeScanResultModal()">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div id="scanResult">
                            <div class="resultDetails" style="font-size: 30px;">
                            </div>
                            <div class="resultDesc row align-items-center justify-content-center" style="font-size: 32px; text-decoration:underline; font-weight: bold;">
                            </div>
                        </div>
                    </div>
                    <div class="yesOrNoBtns modal-footer">
                        <button type="button" class="btn btn-primary"  onclick="postSku()">Matched</button>
                        <button type="button" class="btn btn-secondary" style="float:right;" onclick="tagWrongSign()">Wrong Sign</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Success Modal -->
        <div id="successModal" class="modal" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Success</h5>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-success">
                            Updated!
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" onclick="auditSuccess()">Ok</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Unprinted Modal -->
        <div class="modal" id="UnprintedModal" tabindex="-1" role="dialog" aria-labelledby="UnprintedModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="isChecked"></h5>
                        <h5 class="sku"></h5>
                        <h5 class="UnprintedTitle modal-title" id="UnprintedModalLongTitle"></h5>
                        <button type="button" onclick="closeUnprintedModal()">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div id="Unprinted">
                            <div class="resultDetails">
                            </div>
                            <div class="resultDesc row align-items-center justify-content-center" style="font-size: 24px; font-weight: bold;">
                            </div>
                        </div>
                    </div>
                    <div class="yesOrNoBtns modal-footer d-flex justify-content-between">
                        <button type="button" class="btn btn-primary" onclick="notRequireTagging()">Not Required</button>
                        <button type="button" class="btn btn-success" onclick="RequireTagging()">Required</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Printed Modal -->
        <div class="modal" id="printedModal" tabindex="-1" role="dialog" aria-labelledby="printedModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="isChecked"></h5>
                        <h5 class="sku"></h5>
                        <h5 class="printedTitle modal-title" id="printedModalLongTitle"></h5>
                        <button type="button" onclick="closePrintedModal()">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div id="printed">
                            <div class="resultDetails">
                            </div>
                            <div class="resultDesc" style="font-size: 18px; font-weight: bold;">
                            </div>
                        </div>
                    </div>
                    <div class="yesOrNoBtns modal-footer d-flex justify-content-between">
                        <button type="button" class="btn btn-primary" onclick="postSkuWithRemarks()">Yes</button>
                        <button type="button" class="btn btn-secondary" onclick="closePrintedModal()">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>


</body>
</html>
<script>
    var modalContainer = document.getElementById('barcodeScanModal');
    var scanResultModalContainer = document.getElementById('scanResultModal');
    var successModalContainer = document.getElementById('successModal');
    var unprintedModal = document.getElementById('UnprintedModal');
    var printedModal = document.getElementById('printedModal');
    var html5QrcodeScanner;
    var isScanUsed = localStorage.getItem("isScanUsed");


    $(document).ready(function () {

        InitLoad();

        var tableForPrinted = null;
        var tableForNotPrinted = null;
        var tableForAudited = null;
        var printedCount = 0;
        var auditedCount = 0;
        var unPrintedCount = 0;
        var notRequiredYCount = 0;
        var notRequiredNCount = 0;
        var NOFListCount = 0;
        var DisposalListCount = 0;
        var MarkDownListCount = 0;
        var ExpiredListCount = 0;

        function InitLoad() {
            $("#loadingContainer").show();

            $.ajax({
                url: '/Audit/LoadAudit',
                type: "POST",
                dataType: 'json',
                success: function (data) {

                    if (tableForPrinted !== null) {
                        tableForPrinted.destroy();
                    }
                    if (tableForNotPrinted !== null) {
                        tableForNotPrinted.destroy();
                    }
                    if (tableForAudited !== null) {
                        tableForAudited.destroy();
                    }

                    RenderTableForPrinted(data.PrintedList);
                    RenderTableForNotPrinted(data.NotPrintedList);
                    RenderTableForAudited(data.AuditedList);

                    printedCount = data.PrintedList.length;
                    auditedCount = data.AuditedList.length;
                    unPrintedCount = data.NotPrintedList.length;

                    var notRequiredY = data.NotPrintedList.filter(function (item) {
                        return item.IsNotRequired === 'Yes';
                    });
                    notRequiredYCount = notRequiredY.length;

                    var notRequiredN = data.NotPrintedList.filter(function (item) {
                        return item.IsNotRequired === 'No';
                    });
                    notRequiredNCount = notRequiredN.length;

                    var NOFList = data.AuditedList.filter(function (item) {
                        return item.AuditedRemarks === "NOF";
                    });
                    NOFListCount = NOFList.length;

                    var DisposalList = data.AuditedList.filter(function (item) {
                        return item.AuditedRemarks === "Damaged";
                    });
                    DisposalListCount = DisposalList.length;

                    var MarkDownList = data.AuditedList.filter(function (item) {
                        return item.AuditedRemarks === "Marked Down";
                    });
                    MarkDownListCount = MarkDownList.length;

                    var ExpiredList = data.AuditedList.filter(function (item) {
                        return item.AuditedRemarks === "Expired";
                    });
                    ExpiredListCount = ExpiredList.length;

                    RenderGraph();

                    $("#loadingContainer").hide();

                },
                error: function (e) { }
            });

        }

        if (isScanUsed == "true") {
            Scan();
        }

        function RenderTableForPrinted(data) {
            tableForPrinted = $('#printed-pca-table').DataTable({
                scrollY: 500,
                scrollX: true,
                scroller: true,
                deferRender: true,
                lengthMenu: [
                    [10, 25, 50, -1],
                    [10, 25, 50, 'All']
                ],
                pageLength: -1,
                data: data,
                order: [],
                columnDefs: [
                    { targets: [0, 3, 4, 6, 7, 13], orderable: false },
                ],
                columns: [
                    {
                        data: null, render: function (data, type, row) {
                            return '<input type="checkbox" class="rowCheckboxPrinted" data-id="' + data.O3SKU + '">';
                        }
                    },
                    { data: 'O3SKU', name: 'O3SKU' },
                    { data: 'O3UPC', name: 'O3UPC' },
                    { data: 'O3FNAM', name: 'O3FNAM' },
                    { data: 'O3IDSC', name: 'O3IDSC', className: 'text-nowrap' },
                    { data: 'IsWrongSign', name: 'IsWrongSign' },
                    { data: 'O3REG', name: 'O3REG' },
                    { data: 'O3POS', name: 'O3POS' },
                    { data: 'O3SDT', name: 'O3SDT' },
                    { data: 'O3EDT', name: 'O3EDT' },
                    { data: 'TypeName', name: 'TypeName' },
                    { data: 'SizeName', name: 'SizeName' },
                    { data: 'CategoryName', name: 'CategoryName' },
                    { data: 'DepartmentName', name: 'DepartmentName' },
                    { data: 'O3TYPE', name: 'O3TYPE' },
                    { data: 'IsReverted', name: 'IsReverted' },
                    {
                        data: 'IsExemp', name: 'IsExemp', render: function (data) {
                            if (data === 'Yes') {
                                return '<span style="color: green;">' + data + '</span>';
                            } else {
                                return '<span style="color: red;">' + data + '</span>';
                            }
                        }
                    },
                ],
                "dom": '<"top"lfB>rt<"bottom"ip>',
            });
        }

        function RenderTableForAudited(data) {
            tableForAudited = $('#audited-pca-table').DataTable({
                scrollY: 500,
                scrollX: true,
                scroller: true,
                deferRender: true,
                lengthMenu: [
                    [10, 25, 50, -1],
                    [10, 25, 50, 'All']
                ],
                pageLength: 50,
                data: data,
                columnDefs: [
                    { targets: [2, 3, 4, 5, 11], orderable: false },
                ],
                columns: [
                    { data: 'O3SKU', name: 'O3SKU' },
                    { data: 'O3UPC', name: 'O3UPC' },
                    { data: 'O3FNAM', name: 'O3FNAM' },
                    { data: 'O3IDSC', name: 'O3IDSC', className: 'text-nowrap' },
                    { data: 'O3REG', name: 'O3REG' },
                    { data: 'O3POS', name: 'O3POS' },
                    { data: 'O3SDT', name: 'O3SDT' },
                    { data: 'O3EDT', name: 'O3EDT' },
                    { data: 'TypeName', name: 'TypeName' },
                    { data: 'SizeName', name: 'SizeName' },
                    { data: 'CategoryName', name: 'CategoryName' },
                    { data: 'DepartmentName', name: 'DepartmentName' },
                    { data: 'O3TYPE', name: 'O3TYPE' },
                    { data: 'IsReverted', name: 'IsReverted' },
                    {
                        data: 'IsExemp', name: 'IsExemp', render: function (data) {
                            if (data === 'Yes') {
                                return '<span style="color: green;">' + data + '</span>';
                            } else {
                                return '<span style="color: red;">' + data + '</span>';
                            }
                        }
                    },
                    { data: 'AuditedRemarks', name: 'AuditedRemarks' },
                ],
                "dom": '<"top"lfB>rt<"bottom"ip>',

                initComplete: function () {
         
                    var $button = $('<button>')
                        .addClass('custom-button')
                        .text('Export')
                        .on('click', function () {
                            window.location.href = '/Audit/ExportDataTableToExcel?&filter=' + $select.val();
                        });


                    var $select = $('<select style="margin-left: 20px; padding: 4px;">');

                    var $All = $('<option>').text('All').val('all');
                    var $Nof = $('<option>').text('NOF').val('nof');
                    var $Damaged = $('<option>').text('Damaged').val('damaged');
                    var $MarkedDown = $('<option>').text('Marked Down').val('markeddown');
                    var $Expired = $('<option>').text('Expired').val('expired');

                    $select.append($All, $Nof, $Damaged, $MarkedDown, $Expired);

                    $select.on('change', function () {

                        $('#loadingContainer').show();
                        setTimeout(function () {
                          
                    
                            if ($select.val() == "nof") {
                                tableForAudited.column(15).search("NOF").draw();
                            }
                            else if ($select.val() == "damaged") {

                                tableForAudited.column(15).search("Damaged").draw();
                            }
                            else if ($select.val() == "markeddown") {
                                tableForAudited.column(15).search("Marked Down").draw();
                            }
                            else if ($select.val() == "expired") {
                                tableForAudited.column(15).search("Expired").draw();
                            }
                            else {
                                tableForAudited.column(15).search("").draw();
                            }

                            $("#loadingContainer").hide();

                        }, 300);

                    });

                    var dataTableWrapper = $('#audited-pca-table').closest('.dataTables_wrapper');
                    dataTableWrapper.find('.dataTables_filter').before($button);
                    dataTableWrapper.find('.dataTables_filter').before($select);

                }
            });
        }

        function RenderTableForNotPrinted(data) {
            tableForNotPrinted = $('#notprinted-pca-table').DataTable({
                scrollY: 500,
                scrollX: true,
                scroller: true,
                deferRender: true,
                lengthMenu: [
                    [10, 25, 50, -1],
                    [10, 25, 50, 'All']
                ],
                pageLength: 50,
                data: data,
                order: [],
                columnDefs: [
                    { targets: [0, 3, 4, 5, 6, 12], orderable: false },
                ],
                columns: [
                    {
                        data: null, render: function (data, type, row) {
                            if (row.IsNotRequired === 'Yes') {
                                return '<input type="checkbox" class="rowCheckboxNotPrinted" data-id="' + data.O3SKU + '" checked>';
                            } else {
                                return '<input type="checkbox" class="rowCheckboxNotPrinted" data-id="' + data.O3SKU + '">';
                            }
                        }
                    },
                    { data: 'O3SKU', name: 'O3SKU' },
                    { data: 'O3UPC', name: 'O3UPC' },
                    { data: 'O3FNAM', name: 'O3FNAM' },
                    { data: 'O3IDSC', name: 'O3IDSC', className: 'text-nowrap' },
                    { data: 'O3REG', name: 'O3REG' },
                    { data: 'O3POS', name: 'O3POS' },
                    { data: 'O3SDT', name: 'O3SDT' },
                    { data: 'O3EDT', name: 'O3EDT' },
                    { data: 'TypeName', name: 'TypeName' },
                    { data: 'SizeName', name: 'SizeName' },
                    { data: 'CategoryName', name: 'CategoryName' },
                    { data: 'DepartmentName', name: 'DepartmentName' },
                    { data: 'O3TYPE', name: 'O3TYPE' },
                    { data: 'IsReverted', name: 'IsReverted' },
                    {
                        data: 'IsExemp', name: 'IsExemp', render: function (data) {
                            if (data === 'Yes') {
                                return '<span style="color: green;">' + data + '</span>';
                            } else {
                                return '<span style="color: red;">' + data + '</span>';
                            }
                        }
                    },
                ],
                "dom": '<"top"lfB>rt<"bottom"ip>',
            });
        }

        // FIX DT HEADER MISALIGNMENT FOR NewExemption INV TAB
        $('.nav-link-tab').click(function () {
            // Remove 'active' class from all tabs
            $('.nav-link-tab').removeClass('active');

            // Add 'active' class to the clicked tab
            $(this).addClass('active');

            // Get the href value of the clicked tab
            var tabId = $(this).attr('href');

            // Show the corresponding tab content
            $('.tab-pane').removeClass('show active');
            $(tabId).addClass('show active');

            // Get the current active tab
            var currentActiveTab = $('.nav-link-tab.active').attr('href');
            if (currentActiveTab == "#printed-pca") {
                tableForPrinted.draw();
            }
            else if (currentActiveTab == "#audited-pca") {
                tableForAudited.draw();
            }
            else if (currentActiveTab == "#notprinted-pca") {
                tableForNotPrinted.draw();
            }

        });

        // FIX DT HEADER MISALIGNMENT FOR NewExemption INV TAB
        $('.nav-link-burger').click(function () {
            setTimeout(function () {
                $("a.nav-link-tab.active").trigger("click");
            }, 300);
        });


        function RenderGraph() {

            // 1st GRAPH
            
            var totalSku = printedCount + unPrintedCount + auditedCount;

            var text = document.querySelector('#graph .graph1Count').textContent.concat(totalSku);
            document.querySelector('#graph .graph1Count').textContent = text;

            var printedPercentage = (((printedCount + auditedCount) / totalSku) * 100).toFixed(2);
            var UnprintedPercentage = ((notRequiredNCount / totalSku) * 100).toFixed(2);
            var notRequiredYPercentage = ((notRequiredYCount / totalSku) * 100).toFixed(2);

            var data1 = `<div class="graphcontainer">
                            <div class="graphrow">
                                <div class="graphcolumn">
                                    <label>Printed: </label> ${printedCount + auditedCount} - ${printedPercentage}%
                                </div>
                                <div class="graphcolumn">
                                    <label>Not Required: </label> ${notRequiredYCount} - ${notRequiredYPercentage}%
                                </div>
                                <div class="graphcolumn">
                                    <label>Unprinted: </label> ${unPrintedCount - notRequiredYCount} - ${UnprintedPercentage}%
                                </div>
                            </div>
                        </div>`;

            document.querySelector('#graph .graph1Data').innerHTML = data1;
            var data = {
                "Printed": printedCount + auditedCount,
                "Not Required": notRequiredYCount,
                "Unprinted": unPrintedCount - notRequiredYCount
            };

            var labels = Object.keys(data);
            var values = Object.values(data);

            var ctx = document.getElementById('pieChart').getContext('2d');
            var pieChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: values,
                        backgroundColor: [
                            "#51829B",
                            "#FFDEB4",
                            "#E97777"
                        ],
                        borderColor: [
                            "rgb(255,255,255)",
                            "rgb(255,255,255)",
                            "rgb(255,255,255)"
                        ],
                        borderWidth: 1,
                        hoverOffset: 5
                    }]
                },
                //plugins: [ChartDataLabels],
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        //title: {
                        //    display: true,
                        //    text: "Printed | Not Required | Unprinted"
                        //},
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    var label = context.label;
                                    var value = context.formattedValue;

                                    if (label == "Printed") {
                                        label += ' - ' + value + ' (' + printedPercentage + '%)';
                                    }
                                    else if (label == "Unprinted") {
                                        label += ' - ' + value + ' (' + UnprintedPercentage+ '%)';
                                    }
                                    else {
                                        label += ' - ' + value + ' (' + notRequiredYPercentage + '%)';
                                    }

                                    return label;
                                }
                            }
                        },
                        //datalabels: {
                        //    display: true,
                        //    formatter: (val, ctx) => {
                        //        // Grab the label for this value
                        //        var label = ctx.chart.data.labels[ctx.dataIndex];

                        //        var printedPercentage = ((printedCount / totalSku) * 100);
                        //        var UnprintedPercentage = (((unPrintedCount - notRequiredYCount) / totalSku) * 100);
                        //        var notRequiredYPercentage = ((notRequiredYCount / totalSku) * 100);


                        //        if (label == "Printed") {
                        //            label = printedPercentage.toFixed(2) + '%' + " (" + printedCount + ")";
                        //        }
                        //        else if (label == "Unprinted") {
                        //            label = UnprintedPercentage.toFixed(2) + '%' + " (" + notRequiredNCount + ")";
                        //        }
                        //        else {
                        //            label = notRequiredYPercentage.toFixed(2) + '%' + " (" + notRequiredYCount + ")";
                        //        }

                        //        return label;
                        //    },
                        //    align: 'top',
                        //    backgroundColor: '#ccc',
                        //    borderRadius: 3,
                        //    font: {
                        //        size: 14,
                        //    },
                        //},
                    }
                }
            });


            // 2nd GRAPH -- AUDITED VS UNAUDITED
            var auditedUnauditedSum = auditedCount + printedCount;
            var auditedWithoutRemarksCount = auditedCount - NOFListCount - DisposalListCount - MarkDownListCount - ExpiredListCount;
            var text = document.querySelector('#graph .graph2Count').textContent.concat(auditedUnauditedSum);
            document.querySelector('#graph .graph2Count').textContent = text;

            var auditedPercentage = ((auditedWithoutRemarksCount / auditedUnauditedSum) * 100).toFixed(2);
            var unauditedPercentage = ((printedCount / auditedUnauditedSum) * 100).toFixed(2);
            var nofPercentage = ((NOFListCount / auditedUnauditedSum) * 100).toFixed(2);
            var disposalPercentage = ((DisposalListCount / auditedUnauditedSum) * 100).toFixed(2);
            var markdownPercentage = ((MarkDownListCount / auditedUnauditedSum) * 100).toFixed(2);
            var expiredPercentage = ((ExpiredListCount / auditedUnauditedSum) * 100).toFixed(2);

            var data2 = `<div class="graphcontainer">
                            <div class="graphrow">
                                <div class="graphcolumn">
                                    <label>Audited: </label> ${auditedWithoutRemarksCount} - ${auditedPercentage}%
                                </div>
                                <div class="graphcolumn">
                                    <label>NOF: </label> ${NOFListCount} - ${nofPercentage}%
                                </div>
                                <div class="graphcolumn">
                                    <label>Damaged: </label> ${DisposalListCount} - ${disposalPercentage}%
                                </div>
                                <div class="graphcolumn">
                                    <label>Marked Down: </label> ${MarkDownListCount} - ${markdownPercentage}%
                                </div>
                                <div class="graphcolumn">
                                    <label>Expired: </label> ${ExpiredListCount} - ${expiredPercentage}%
                                </div>
                                <div class="graphcolumn">
                                    <label>Unaudited: </label> ${printedCount} - ${unauditedPercentage}%
                                </div>
                           </div>
                        </div>`;

            document.querySelector('#graph .graph2Data').innerHTML = data2;


            var data = {
                "Audited": auditedWithoutRemarksCount,
                "NOF": NOFListCount,
                "Damaged": DisposalListCount,
                "Marked Down": MarkDownListCount,
                "Expired": ExpiredListCount,
                "Unaudited": printedCount
            };

            var labels = Object.keys(data);
            var values = Object.values(data);

            var ctx = document.getElementById('pieChart2').getContext('2d');
            var pieChart2 = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: values,
                        backgroundColor: [
                            "#51829B",
                            "#FFDEB4",
                            "#79AC78",
                            "#967E76",
                            "#8338ec",
                            "#E97777"

                        ],
                        borderColor: [
                            "rgb(255,255,255)",
                            "rgb(255,255,255)",
                            "rgb(255,255,255)",
                            "rgb(255,255,255)",
                            "rgb(255,255,255)",
                            "rgb(255,255,255)"
                        ],
                        borderWidth: 1,
                        hoverOffset: 5
                    }]
                },
                //plugins: [ChartDataLabels],
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        //title: {
                        //    display: true,
                        //    text: `Audited - ${auditedWithoutRemarksCount} (${auditedPercentage}%)| NOF - ${NOFListCount} (${nofPercentage}%)| Disposal - ${DisposalListCount} (${disposalPercentage}%)| Mark Down - ${MarkDownListCount} (${markdownPercentage}%)| Unaudited - ${printedCount} (${unauditedPercentage}%)`
                        //},
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    var label = context.label;
                                    var value = context.formattedValue;


                                    if (label == "Audited") {
                                        label += ' - ' + value + ' (' + auditedPercentage + '%)';
                                    }
                                    else if (label == "Unaudited") {
                                        label += ' - ' + value + ' (' + unauditedPercentage + '%)';
                                    }
                                    else if (label == "NOF") {
                                        label += ' - ' + value + ' (' + nofPercentage + '%)';
                                    }
                                    else if (label == "Damaged") {
                                        label += ' - ' + value + ' (' + disposalPercentage + '%)';
                                    }
                                    else if (label == "Marked Down") {
                                        label += ' - ' + value + ' (' + markdownPercentage + '%)';
                                    }
                                    else if (label == "Expired") {
                                        label += ' - ' + value + ' (' + expiredPercentage + '%)';
                                    }

                                    return label;
                                }
                            }
                        },
                        //datalabels: {
                        //    display: true,
                        //    formatter: (val, ctx) => {
                        //        // Grab the label for this value
                        //        var label = ctx.chart.data.labels[ctx.dataIndex];

                        //        var auditedPercentage = (auditedWithoutRemarksCount / auditedUnauditedSum) * 100;
                        //        var unauditedPercentage = (printedCount / auditedUnauditedSum) * 100;
                        //        var nofPercentage = (NOFListCount / auditedUnauditedSum) * 100;
                        //        var disposalPercentage = (DisposalListCount / auditedUnauditedSum) * 100;
                        //        var markdownPercentage = (MarkDownListCount / auditedUnauditedSum) * 100;

                        //        if (label == "Audited") {
                        //            label = auditedPercentage.toFixed(2) + '%' + " (" + auditedWithoutRemarksCount + ")";
                        //        }
                        //        else if (label == "Unaudited"){
                        //            label = unauditedPercentage.toFixed(2) + '%' + " (" + printedCount + ")";
                        //        }
                        //        else if (label == "NOF") {
                        //            label = nofPercentage.toFixed(2) + '%' + " (" + NOFListCount + ")";
                        //        }
                        //        else if (label == "Disposal") {
                        //            label = disposalPercentage.toFixed(2) + '%' + " (" + DisposalListCount + ")";
                        //        }
                        //        else if (label == "Mark Down") {
                        //            label = markdownPercentage.toFixed(2) + '%' + " (" + MarkDownListCount + ")";
                        //        }

                        //        return label;
                        //    },
                        //    align: 'top',
                        //    backgroundColor: '#ccc',
                        //    borderRadius: 3,
                        //    font: {
                        //        size: 14,
                        //    },
                        //},
                    }
                }
            });
        }

        // FILTER DEPT FOR PRINTED
        var dialogForPrinted = $('<div>').dialog({
            autoOpen: false,
            modal: true,
            resizable: false,
            width: 300,
            position: { my: 'center', at: 'center', of: window },
            open: function (event, ui) {
                $('.ui-widget-overlay').bind('click', function () {
                    dialogForPrinted.dialog('close');
                });
            },
            close: function (event, ui) {
                $('.ui-widget-overlay').unbind('click');
            }
        });
        $('#printed-pca-table thead').on('click', '.filter-icon', function (event) {
            event.stopPropagation(); // Prevent event propagation

            var columnName = "Dept";
            var table = $('#printed-pca-table').DataTable();
            var columnIndex = table.column(function (idx, data, node) {
                return table.column(idx).header().textContent.trim() === columnName ? true : false;
            }).index();

            var column = tableForPrinted.column(columnIndex);

            // Clear existing filter input
            dialogForPrinted.dialog('option', 'title', 'Filter Dept').html('');

            // Get distinct values of the column
            var distinctValues = column.data().unique().toArray();

            // Retrieve previously selected values (if any)
            var selectedValues = column.search().split('|').map(function (value) {
                return value.trim();
            });

            if (selectedValues.length > 0) {
                selectedValues[0] = selectedValues[0].replace(/^\^\(/, '');
                var lastIndex = selectedValues.length - 1;
                selectedValues[lastIndex] = selectedValues[lastIndex].replace(/\)\$$/, '');
            }


            // Create checkboxes for each distinct value
            var scrollableDiv = $('<div>').css({
                'max-height': '200px', // Set a maximum height for scrolling
                'overflow-y': 'scroll' // Enable vertical scrolling
            });

            var checkboxContainer = $('<div>').css({
                'display': 'flex',
                'flex-direction': 'column', // Align checkboxes vertically
                'gap': '3px' // Add spacing between checkboxes
            });

            // Add "Select All" checkbox
            var selectAllCheckbox = $('<input type="checkbox">').addClass('filter-checkbox select-all-checkbox');
            var selectAllLabel = $('<label>').text(' Select All').prepend(selectAllCheckbox);
            checkboxContainer.prepend(selectAllLabel);

            for (var i = 0; i < distinctValues.length; i++) {
                var checkbox = $('<input type="checkbox">').addClass('filter-checkbox').val(distinctValues[i]);
                if (selectedValues.includes(distinctValues[i])) {
                    checkbox.prop('checked', true);
                }
                var label = $('<label>').text(' ' + distinctValues[i]).prepend(checkbox);
                checkboxContainer.append(label);
            }

            scrollableDiv.append(checkboxContainer);
            dialogForPrinted.append(scrollableDiv);

            // Create button container for the "OK" and "Clear All Checkboxes" buttons
            var buttonContainer = $('<div>').css('display', 'flex');
            dialogForPrinted.append(buttonContainer);

            // Create "Clear All Checkboxes" button
            var clearButton = $('<button>').text('Clear All').addClass('btn btn-secondary btn-sm').css('background-color', 'gray').click(function () {
                $('.filter-checkbox').prop('checked', false);
                applyFilter();
            });
            buttonContainer.append(clearButton);

            // Create "OK" button
            var okButton = $('<button>').text('OK').addClass('btn btn-secondary btn-sm ml-2').css('background-color', 'orange').click(function () {
                applyFilter();
                dialogForPrinted.dialog('close');
            });
            buttonContainer.append(okButton);

            // Apply filter when checkbox state changes
            $('.filter-checkbox').on('change', applyFilter);

            // Toggle state of all checkboxes when "Select All" checkbox changes
            selectAllCheckbox.click(function () {
                $('.filter-checkbox').not('.select-all-checkbox').prop('checked', $(this).prop('checked'));
            });

            // Open the filter dialog
            dialogForPrinted.dialog('open');

            function applyFilter() {
                var selectedValues = $('.filter-checkbox:checked').map(function () {
                    return $(this).val();
                }).get();

                if (selectedValues.length === 0) {
                    column.search('').draw();
                } else {
                    // Use a regular expression to match exact values
                    var regex = '^(' + selectedValues.map(function (value) {
                        return $.fn.dataTable.util.escapeRegex(value);
                    }).join('|') + ')$';

                    column.search(regex, true, false).draw();
                }
            }
        });

        // FILTER DEPT FOR AUDITED
        var dialogForAudited = $('<div>').dialog({
            autoOpen: false,
            modal: true,
            resizable: false,
            width: 300,
            position: { my: 'center', at: 'center', of: window },
            open: function (event, ui) {
                $('.ui-widget-overlay').bind('click', function () {
                    dialogForAudited.dialog('close');
                });
            },
            close: function (event, ui) {
                $('.ui-widget-overlay').unbind('click');
            }
        });
        $('#audited-pca-table thead').on('click', '.filter-icon', function (event) {
            event.stopPropagation(); // Prevent event propagation

            var columnName = "Dept";
            var table = $('#audited-pca-table').DataTable();
            var columnIndex = table.column(function (idx, data, node) {
                return table.column(idx).header().textContent.trim() === columnName ? true : false;
            }).index();

            var column = tableForAudited.column(columnIndex);

            // Clear existing filter input
            dialogForAudited.dialog('option', 'title', 'Filter Dept').html('');

            // Get distinct values of the column
            var distinctValues = column.data().unique().toArray();

            // Retrieve previously selected values (if any)
            var selectedValues = column.search().split('|').map(function (value) {
                return value.trim();
            });

            if (selectedValues.length > 0) {
                selectedValues[0] = selectedValues[0].replace(/^\^\(/, '');
                var lastIndex = selectedValues.length - 1;
                selectedValues[lastIndex] = selectedValues[lastIndex].replace(/\)\$$/, '');
            }


            // Create checkboxes for each distinct value
            var scrollableDiv = $('<div>').css({
                'max-height': '200px', // Set a maximum height for scrolling
                'overflow-y': 'scroll' // Enable vertical scrolling
            });

            var checkboxContainer = $('<div>').css({
                'display': 'flex',
                'flex-direction': 'column', // Align checkboxes vertically
                'gap': '3px' // Add spacing between checkboxes
            });

            // Add "Select All" checkbox
            var selectAllCheckbox = $('<input type="checkbox">').addClass('filter-checkbox select-all-checkbox');
            var selectAllLabel = $('<label>').text(' Select All').prepend(selectAllCheckbox);
            checkboxContainer.prepend(selectAllLabel);

            for (var i = 0; i < distinctValues.length; i++) {
                var checkbox = $('<input type="checkbox">').addClass('filter-checkbox').val(distinctValues[i]);
                if (selectedValues.includes(distinctValues[i])) {
                    checkbox.prop('checked', true);
                }
                var label = $('<label>').text(' ' + distinctValues[i]).prepend(checkbox);
                checkboxContainer.append(label);
            }

            scrollableDiv.append(checkboxContainer);
            dialogForAudited.append(scrollableDiv);

            // Create button container for the "OK" and "Clear All Checkboxes" buttons
            var buttonContainer = $('<div>').css('display', 'flex');
            dialogForAudited.append(buttonContainer);

            // Create "Clear All Checkboxes" button
            var clearButton = $('<button>').text('Clear All').addClass('btn btn-secondary btn-sm').css('background-color', 'gray').click(function () {
                $('.filter-checkbox').prop('checked', false);
                applyFilter();
            });
            buttonContainer.append(clearButton);

            // Create "OK" button
            var okButton = $('<button>').text('OK').addClass('btn btn-secondary btn-sm ml-2').css('background-color', 'orange').click(function () {
                applyFilter();
                dialogForAudited.dialog('close');
            });
            buttonContainer.append(okButton);

            // Apply filter when checkbox state changes
            $('.filter-checkbox').on('change', applyFilter);

            // Toggle state of all checkboxes when "Select All" checkbox changes
            selectAllCheckbox.click(function () {
                $('.filter-checkbox').not('.select-all-checkbox').prop('checked', $(this).prop('checked'));
            });

            // Open the filter dialog
            dialogForAudited.dialog('open');

            function applyFilter() {
                var selectedValues = $('.filter-checkbox:checked').map(function () {
                    return $(this).val();
                }).get();

                if (selectedValues.length === 0) {
                    column.search('').draw();
                } else {
                    // Use a regular expression to match exact values
                    var regex = '^(' + selectedValues.map(function (value) {
                        return $.fn.dataTable.util.escapeRegex(value);
                    }).join('|') + ')$';

                    column.search(regex, true, false).draw();
                }
            }
        });

        // FILTER DEPT FOR NOT PRINTED
        var dialogForNotPrinted = $('<div>').dialog({
            autoOpen: false,
            modal: true,
            resizable: false,
            width: 300,
            position: { my: 'center', at: 'center', of: window },
            open: function (event, ui) {
                $('.ui-widget-overlay').bind('click', function () {
                    dialogForNotPrinted.dialog('close');
                });
            },
            close: function (event, ui) {
                $('.ui-widget-overlay').unbind('click');
            }
        });
        $('#notprinted-pca-table thead').on('click', '.filter-icon', function (event) {
            event.stopPropagation(); // Prevent event propagation

            var columnName = "Dept";
            var table = $('#notprinted-pca-table').DataTable();
            var columnIndex = table.column(function (idx, data, node) {
                return table.column(idx).header().textContent.trim() === columnName ? true : false;
            }).index();

            var column = tableForNotPrinted.column(columnIndex);

            // Clear existing filter input
            dialogForNotPrinted.dialog('option', 'title', 'Filter Dept').html('');

            // Get distinct values of the column
            var distinctValues = column.data().unique().toArray();

            // Retrieve previously selected values (if any)
            var selectedValues = column.search().split('|').map(function (value) {
                return value.trim();
            });

            if (selectedValues.length > 0) {
                selectedValues[0] = selectedValues[0].replace(/^\^\(/, '');
                var lastIndex = selectedValues.length - 1;
                selectedValues[lastIndex] = selectedValues[lastIndex].replace(/\)\$$/, '');
            }


            // Create checkboxes for each distinct value
            var scrollableDiv = $('<div>').css({
                'max-height': '200px', // Set a maximum height for scrolling
                'overflow-y': 'scroll' // Enable vertical scrolling
            });

            var checkboxContainer = $('<div>').css({
                'display': 'flex',
                'flex-direction': 'column', // Align checkboxes vertically
                'gap': '3px' // Add spacing between checkboxes
            });

            // Add "Select All" checkbox
            var selectAllCheckbox = $('<input type="checkbox">').addClass('filter-checkbox select-all-checkbox');
            var selectAllLabel = $('<label>').text(' Select All').prepend(selectAllCheckbox);
            checkboxContainer.prepend(selectAllLabel);

            for (var i = 0; i < distinctValues.length; i++) {
                var checkbox = $('<input type="checkbox">').addClass('filter-checkbox').val(distinctValues[i]);
                if (selectedValues.includes(distinctValues[i])) {
                    checkbox.prop('checked', true);
                }
                var label = $('<label>').text(' ' + distinctValues[i]).prepend(checkbox);
                checkboxContainer.append(label);
            }

            scrollableDiv.append(checkboxContainer);
            dialogForNotPrinted.append(scrollableDiv);

            // Create button container for the "OK" and "Clear All Checkboxes" buttons
            var buttonContainer = $('<div>').css('display', 'flex');
            dialogForNotPrinted.append(buttonContainer);

            // Create "Clear All Checkboxes" button
            var clearButton = $('<button>').text('Clear All').addClass('btn btn-secondary btn-sm').css('background-color', 'gray').click(function () {
                $('.filter-checkbox').prop('checked', false);
                applyFilter();
            });
            buttonContainer.append(clearButton);

            // Create "OK" button
            var okButton = $('<button>').text('OK').addClass('btn btn-secondary btn-sm ml-2').css('background-color', 'orange').click(function () {
                applyFilter();
                dialogForNotPrinted.dialog('close');
            });
            buttonContainer.append(okButton);

            // Apply filter when checkbox state changes
            $('.filter-checkbox').on('change', applyFilter);

            // Toggle state of all checkboxes when "Select All" checkbox changes
            selectAllCheckbox.click(function () {
                $('.filter-checkbox').not('.select-all-checkbox').prop('checked', $(this).prop('checked'));
            });

            // Open the filter dialog
            dialogForNotPrinted.dialog('open');

            function applyFilter() {
                var selectedValues = $('.filter-checkbox:checked').map(function () {
                    return $(this).val();
                }).get();

                if (selectedValues.length === 0) {
                    column.search('').draw();
                } else {
                    // Use a regular expression to match exact values
                    var regex = '^(' + selectedValues.map(function (value) {
                        return $.fn.dataTable.util.escapeRegex(value);
                    }).join('|') + ')$';

                    column.search(regex, true, false).draw();
                }
            }
        });

        $('#notprinted-pca-table').on('change', '.rowCheckboxNotPrinted', function () {
            var rowData = tableForNotPrinted.row($(this).closest('tr')).data();
            var isChecked = $(this).is(':checked');
            var id = $(this).data('id');
            var details = `<b>SKU:</b> ${rowData.O3SKU} <br> <b>Description:</b> ${rowData.O3IDSC} <br> <b>Current Price:</b> ${rowData.O3POS} <br><br><br>`;

            document.querySelector("#UnprintedModal .isChecked").textContent = isChecked;
            document.querySelector("#UnprintedModal .isChecked").style.display = "none";
            document.querySelector("#UnprintedModal .sku").textContent = id;
            document.querySelector("#UnprintedModal .sku").style.display = "none";

            if (isChecked) {
                document.querySelector("#UnprintedModal .UnprintedTitle").textContent = "For Confirmation";
                document.querySelector("#Unprinted .resultDetails").innerHTML = details;
                //document.querySelector("#Unprinted .resultDesc").textContent = "Not required?";
                document.querySelector("#UnprintedModal .yesOrNoBtns").style.display = "block";
                unprintedModal.style.display = "block";

            } else {
                document.querySelector("#UnprintedModal .UnprintedTitle").textContent = "For Confirmation";
                document.querySelector("#Unprinted .resultDetails").innerHTML = details;
                //document.querySelector("#Unprinted .resultDesc").textContent = "Uncheck?";
                document.querySelector("#UnprintedModal .yesOrNoBtns").style.display = "block";
                unprintedModal.style.display = "block";
            }
        });

        $('#printed-pca-table').on('change', '.rowCheckboxPrinted', function () {
            var rowData = tableForPrinted.row($(this).closest('tr')).data();
            var isChecked = $(this).is(':checked');
            var id = $(this).data('id');
            var details = `<b>SKU:</b> ${rowData.O3SKU} <br> <b>Description:</b> ${rowData.O3IDSC} <br> <b>Current Price:</b> ${rowData.O3POS} <br><br><br>`;
            var remarksOptions = '';

            getRemarksList().then(function (remarksList) {

                for (var i = 0; i < remarksList.length; i++) {
                    var option = remarksList[i];
                    remarksOptions += '<option value="' + option.Name + '">' + option.Name + '</option>';
                }

                var dropdown = '<div class="form-group row col-12"><label class="col-sm-4 col-form-label" for="remarksList" style="color: red;">Remarks:</label>' +
                    '<select class="col-sm-8 ml-3 form-control custom-select" id="remarksList" >' +
                    remarksOptions +
                    '</select></div>';
                document.querySelector("#printedModal .isChecked").textContent = isChecked;
                document.querySelector("#printedModal .isChecked").style.display = "none";
                document.querySelector("#printedModal .sku").textContent = id;
                document.querySelector("#printedModal .sku").style.display = "none";

                if (isChecked) {
                    document.querySelector("#printedModal .printedTitle").textContent = "For Confirmation";
                    document.querySelector("#printed .resultDetails").innerHTML = details;
                    document.querySelector("#printed .resultDesc").innerHTML = dropdown;
                    document.querySelector("#printedModal .yesOrNoBtns").style.display = "block";
                    printedModal.style.display = "block";

                }
            });

        });
    });

    function Scan() {
        modalContainer.style.display = 'block';

        html5QrcodeScanner = new Html5QrcodeScanner(
            "reader",
            {
                fps: 10,
                qrbox: { width: 300, height: 200 },
                rememberLastUsedCamera: true,
                showZoomSliderIfSupported: true,
                defaultZoomValueIfSupported: 2,
                formatsToSupport: [5, 9, 10, 14, 15], // Code-128, EAN-13, EAN-8, UPC-A, UPC-E respectively
                //videoConstraints: {
                //    facingMode: { exact: "environment" },
                //},
                useBarCodeDetectorIfSupported: true
            },
            false);

        html5QrcodeScanner.render(onScanSuccess, onScanFailure);
    };

    function onScanSuccess(decodedText, decodedResult) {
        html5QrcodeScanner.clear();
        modalContainer.style.display = 'none';
        localStorage.setItem("isScanUsed", true);
        var isScaleTicket =  document.querySelector("#scaleTicket #scaleTicket").checked;

        codeFormat = decodedResult.result.format.toString().toUpperCase();

         $.ajax({
             url: '@Url.Action("ScanBarcode", "Audit")',
             type: 'POST',
             data: { code: decodedText, codeFormat: codeFormat, isScaleTicket: isScaleTicket},
             success: function (result) {

                 document.querySelector("#scanResultModal .sku").textContent = result.Sku;
                 document.querySelector("#scanResultModal .sku").style.display = "none";
                 var details = `<b>SKU:</b> ${result.Sku} <br> <b>Description:</b> ${result.Desc} <br> <b>Current Price:</b> ${result.CurrentPrice} <br><br><br>`;

                 var changesList = "<label style='color:red;'>Changes On:</label> <br> ";

                 if (result.IsSKUUpdate == "Yes") {
                     var changesArray = result.ChangedOn.split(",");

                     changesArray.forEach(function (changes) {

                         if (changes == "O3MODL")
                             changes = "Model";
                         else if (changes == "O3IDSC")
                             changes = "Description";
                         else if (changes == "O3DEPT")
                             changes = "Department";
                         else if (changes = "O3FNAM")
                             changes = "Brand";
                         else if (changes == "O3UPC")
                             changes = "UPC";
                         else if (changes == "O3TUOM")
                             changes = "TUOM";

                         changesList += `- ${changes}<br>`;
                     });
                 } else {
                     changesList = "";
                 }

                 
                 var printPreview = `<iframe src="@Url.Action("PreviewSignage", "Report")?sku=${result.Sku}#toolbar=0&navpanes=0&scrollbar=0&zoom=80" style="width: 100%; height: 600px;" frameborder="0"></iframe>` + changesList;
                 @*var printPreview = `<iframe src="@Url.Action("PreviewSignage", "Report")?sku=${result.Sku}#toolbar=0&navpanes=0&scrollbar=0&zoom=150" style="width: 70%; height: 420px; margin: 100px;" frameborder="0"></iframe>`;*@

                 if (result.IsItemExisting == "Yes") {
                     if (result.IsAudited == "Yes") {
                         document.querySelector("#scanResultModal .scanResultTitle").textContent = "Item Found";
                         document.querySelector("#scanResult .resultDetails").innerHTML = details;
                         document.querySelector("#scanResult .resultDesc").textContent = "Item is already audited.";
                         document.querySelector("#scanResultModal .yesOrNoBtns").style.display = "none";
                         scanResultModalContainer.style.display = 'block';
                     } else {
                         if (result.IsPrinted == "Yes") {

                             document.querySelector("#scanResultModal .scanResultTitle").textContent = "Item Found";
                             document.querySelector("#scanResult .resultDetails").innerHTML = printPreview;
                             if (result.IsPCA == "Yes") {
                                 document.querySelector("#scanResult .resultDesc").textContent = "";
                             } else {
                                 document.querySelector("#scanResult .resultDesc").textContent = "Item does not belong to current PCA.";
                             }
                             document.querySelector("#scanResultModal .yesOrNoBtns").style.display = "block";
                             scanResultModalContainer.style.display = 'block';
                         } else {
                             document.querySelector("#scanResultModal .scanResultTitle").textContent = "Item Found";
                             document.querySelector("#scanResult .resultDetails").innerHTML = details;
                             document.querySelector("#scanResult .resultDesc").textContent = "Item is not yet printed.";
                             document.querySelector("#scanResultModal .yesOrNoBtns").style.display = "none";
                             scanResultModalContainer.style.display = 'block';
                         }
                     }
                 }
                 else {
                     document.querySelector("#scanResultModal .scanResultTitle").textContent = "Item Not Found";
                     document.querySelector("#scanResult .resultDetails").innerHTML = "";
                     document.querySelector("#scanResult .resultDesc").textContent = "Item does not exist.";
                     document.querySelector("#scanResultModal .yesOrNoBtns").style.display = "none";
                     scanResultModalContainer.style.display = 'block';
                 }

             },
             error: function () {
             }
         });
    }

    function onScanFailure(error) {
        console.warn(`Code scan error = ${error}`);
    }

    function closeModal() {
        modalContainer.style.display = 'none';
        html5QrcodeScanner.clear();
        localStorage.setItem("isScanUsed", false);
    }
    function closeScanResultModal() {
        document.querySelector("#scaleTicket #scaleTicket").checked = false;
        scanResultModalContainer.style.display = 'none';
        document.querySelector("#scanResultModal .sku").textContent = "";
        Scan();
    }
    function closeUnprintedModal() { // not used
        var sku = document.querySelector("#UnprintedModal .sku").textContent;
        var checkbox = $(`input[data-id="${sku}"]`);
        var isChecked = document.querySelector("#UnprintedModal .isChecked").textContent;

        if (isChecked === "true")
            checkbox.prop('checked', false);
        else
            checkbox.prop('checked', true);

        unprintedModal.style.display = 'none';
        document.querySelector("#UnprintedModal .sku").textContent = "";
    }

    function postSku() {
        document.querySelector("#scaleTicket #scaleTicket").checked = false;
        scanResultModalContainer.style.display = 'none';
        var sku = document.querySelector("#scanResultModal .sku").textContent;
        var selectedRemarks = 'Matched';
        //$.ajax({
        //    url: '/Audit/Post',
        //    type: 'POST',
        //    data: { sku: sku },
        //    success: function (result) {
        //        if (result) {
        //            successModalContainer.style.display = 'block';
        //        }
        //        document.querySelector("#scanResultModal .sku").textContent = "";
        //    },
        //    error: function () {
        //    }
        //});

        $.ajax({
            url: '/Audit/PostWithRemarks',
            type: 'POST',
            data: { sku: sku, remarks: selectedRemarks },
            success: function (result) {
                if (result) {
                    successModalContainer.style.display = 'block';
                }
                document.querySelector("#scanResultModal .sku").textContent = "";

            },
            error: function () {
            }
        });
    }

    function auditSuccess() {
        successModalContainer.style.display = 'none';
        window.location.href = '/Audit/Index';

    }

    function notRequireTagging() {
        var sku = document.querySelector("#UnprintedModal .sku").textContent;
        //var isChecked = document.querySelector("#UnprintedModal .isChecked").textContent;
        var checkbox = $(`input[data-id="${sku}"]`);
        checkbox.prop('checked', true);

        $.ajax({
            url: '/Audit/NotRequireTagging',
            type: 'POST',
            data: { sku: sku, isChecked: "true" },
            success: function (result) {
                if(result == 1)
                    unprintedModal.style.display = 'none';
                document.querySelector("#UnprintedModal .sku").textContent = "";
            },
            error: function () {
            }
        });
    }

    function RequireTagging() {
        var sku = document.querySelector("#UnprintedModal .sku").textContent;
        //var isChecked = document.querySelector("#UnprintedModal .isChecked").textContent;
        var checkbox = $(`input[data-id="${sku}"]`);
        checkbox.prop('checked', false);

        $.ajax({
            url: '/Audit/NotRequireTagging',
            type: 'POST',
            data: { sku: sku, isChecked: "false" },
            success: function (result) {
                if (result == 1)
                    unprintedModal.style.display = 'none';
                document.querySelector("#UnprintedModal .sku").textContent = "";
            },
            error: function () {
            }
        });
    }

    function closePrintedModal() {
        var sku = document.querySelector("#printedModal .sku").textContent;
        var checkbox = $(`input[data-id="${sku}"]`);
        var isChecked = document.querySelector("#printedModal .isChecked").textContent;

        if (isChecked === "true")
            checkbox.prop('checked', false);

        printedModal.style.display = 'none';
        document.querySelector("#printedModal .sku").textContent = "";
    }

    function postSkuWithRemarks() {
        scanResultModalContainer.style.display = 'none';
        var sku = document.querySelector("#printedModal .sku").textContent;
        var selectedRemarks = $('#remarksList').val();

        $.ajax({
            url: '/Audit/PostWithRemarks',
            type: 'POST',
            data: { sku: sku , remarks: selectedRemarks},
            success: function (result) {
                document.querySelector("#printedModal .sku").textContent = "";
                printedModal.style.display = 'none';

                if (result) {
                    successModalContainer.style.display = 'block';
                }

            },
            error: function () {
            }
        });
    }

    function getRemarksList() {
        return new Promise(function (resolve, reject) {
            $.ajax({
                url: '@Url.Action("GetAllRemarks", "Audit")',
                type: 'POST',
                success: function (response) {
                    resolve(response);
                },
                error: function (e) {
                    reject(e);
                }
            });
        });
    }

    function tagWrongSign() {
        document.querySelector("#scaleTicket #scaleTicket").checked = false;

        scanResultModalContainer.style.display = 'none';
        var sku = document.querySelector("#scanResultModal .sku").textContent;

        $.ajax({
            url: '/Audit/TagWrongSign',
            type: 'POST',
            data: { sku: sku },
            success: function (result) {
                if (result == 1) {
                    successModalContainer.style.display = 'block';
                }
                document.querySelector("#scanResultModal .sku").textContent = "";
            },
            error: function () {
            }
        });
    }


    document.addEventListener('DOMContentLoaded', (event) => {
        const graphTab = document.getElementById('graph-tab');

        graphTab.addEventListener('click', function (e) {
            e.preventDefault();
            // Store the active tab in localStorage
            localStorage.setItem('activeTab', '#graph');
            // Reload the page
            window.location.reload();
        });

        // Check localStorage for the active tab
        const activeTab = localStorage.getItem('activeTab');
        if (activeTab) {
            // Remove the active class from all tabs
            document.querySelectorAll('.nav-link-tab').forEach(tab => {
                tab.classList.remove('active');
            });

            // Add the active class to the stored active tab
            const activeTabElement = document.querySelector(`[href="${activeTab}"]`);
            if (activeTabElement) {
                activeTabElement.classList.add('active');
            }

            // Remove the active class from all tab contents
            document.querySelectorAll('.tab-pane').forEach(pane => {
                pane.classList.remove('active', 'show');
            });

            // Add the active class to the corresponding tab content
            const activePane = document.querySelector(activeTab);
            if (activePane) {
                activePane.classList.add('active', 'show');
            }

            // Clear the stored active tab from localStorage
            localStorage.removeItem('activeTab');
        }
    });
</script>